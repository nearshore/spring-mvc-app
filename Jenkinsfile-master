node {
    def app

    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm
    }

    stage('Build App') {
        sh 'gradle build --info'
    }

    stage('Build Image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */

        app = docker.build("spring-mvc-app")
    }

    stage('Test Image') {
        /* Ideally, we would run a test framework against our image.
         * For this example, we're using a Volkswagen-type approach ;-) */

        app.inside {
            sh 'echo "Tests passed"'
        }
    }

    stage('Push Image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        docker.withRegistry('http://localhost:5000', 'docker-hub-credentials') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }
    }

    stage('Updating Stage') {
        sshagent (credentials: ['stage-server-ssh-credentials']) {
            sh 'ssh -o StrictHostKeyChecking=no -l ubuntu -p 2200 10.26.0.130 /vagrant/update-image-spring-mvc-app-cd'
        }
    }
}